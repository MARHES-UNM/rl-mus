{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "multi-uav-sim-gpu",
	"build": {
		"context": "..",
		"dockerfile": "../docker/env.dockerfile"
	},
	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		5900
		// 8000
	],
	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	"mounts": [
		"source=${localEnv:userprofile}/.ssh,target=/home/dev/.ssh,type=bind"
	],
	// 3. Use 'runArgs' to pass arguments to the container. 
	// run the container with all GPUs
	"runArgs": [
		"--gpus",
		"all"
	],
	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		"ghcr.io/devcontainers-contrib/features/pylint:1": {},
		"ghcr.io/devcontainers-contrib/features/black:1": {}
		// ZSH without OMZ
		// "ghcr.io/devcontainers/features/common-utils:2": {},
		// Python with uv, Ruff, Mypy, MonkeyType and Bandit, installed using pipx
		// "ghcr.io/devcontainers/features/python:1": {},
		// git
		// "ghcr.io/devcontainers/features/git:1": {}
	},
	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/home/dev/conda/envs/py39_gpu/bin/python",
				"vim.insertModeKeyBindings": [
					{
						"before": [
							"j",
							"k"
						],
						"after": [
							"<Esc>"
						]
					}
				],
				"terminal.integrated.scrollback": 1000000,
				"editor.formatOnPaste": true,
				"editor.formatOnSave": true,
				"editor.tabSize": 4,
				"editor.defaultFormatter": null,
				"python.formatting.blackPath": "/usr/local/bin/black",
				"python.formatting.provider": "black",
				"python.linting.enabled": true,
				"python.linting.pylintEnabled": true,
				"python.linting.pylintPath": "/usr/local/bin/pylint",
				"terminal.integrated.defaultProfile.linux": "bash",
				"vim.vimrc.enable": true,
				"files.autoSave": "afterDelay",
				"vim.handleKeys": {
					"<C-x>": false,
					"<C-c>": false,
					"<C-e>": false,
					"<C-a>": false
				}
			},
			// installs useful extensions
			"extensions": [
				"charliermarsh.ruff",
				"davidanson.vscode-markdownlint",
				"dbaeumer.vscode-eslint",
				"eamodio.gitlens",
				"esbenp.prettier-vscode",
				"gitlab.gitlab-workflow",
				"ms-azuretools.vscode-docker",
				"ms-python.black-formatter",
				"ms-python.debugpy",
				"ms-python.isort",
				"ms-python.python",
				"ms-python.vscode-pylance",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.jupyter",
				"ms-toolsai.tensorboard",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-vscode.cpptools",
				"njpwerner.autodocstring",
				"redhat.vscode-yaml",
				"timonwong.shellcheck",
				"twxs.cmake",
				"Tyriar.sort-lines",
				"vscodevim.vim"
			]
		}
	},
	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	// "remoteUser": "vscode",
	"containerUser": "dev",
	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",
	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// for the nvida containers, sh points to sh-wrap. We want it to point to dash
	// https://wiki.debian.org/Shell
	"onCreateCommand": "sudo ln -sf /usr/bin/dash /usr/bin/sh",
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",
	// 10. Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "pip3 install --user -r requirements.txt",
	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	"postStartCommand": "bash /entrypoint.sh"
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
}